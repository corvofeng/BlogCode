

def retryWrapper(Closure job) {
    def varFunc = { func, Object... args ->
        args.each { println it }
        println "args ${args}, ${args.getClass()}, ${args.size()}"
        func.call(*args)
    }
    return varFunc.curry(job)

    // def func = { Object[] args ->
    //     args.each { println it }
    //     waitUntil {
    //         try {
    //             println "args ${args}, ${args.getClass()}, ${args.size()}"
    //             // 将 job 闭包包装在一个匿名函数中，该函数接受可变数量的参数
    //             job.call(*args)
    //             true
    //         } catch (error) {
    //             println error
    //             input 'Retry the job ?'
    //             false
    //         }
    //     }
    // }
    // println func.getClass()
    // return func
}

node {
    stage('Retry Wrapper') {
        def myClosure = { Object... args ->
            args.each { a ->
                println a
            }
        }
        myClosure('Param1', 'Param2', 'Param3')

        def arg = ["Groovy":"Java","Python":"nodeJS", "cc": ["yy": "zz"]]
        println arg.class
        def xx = { a,b,c ->
            println "a ${a}"
            println "b ${b}"
            println "c ${c}"
        }
        def func = retryWrapper(xx)
        func(["cc", arg, arg])
        func("cc", arg, arg)
        // xx("cc", arg, arg)
        // xx(["cc", arg, arg])
    }


    stage ('test func') {
        // https://stackoverflow.com/a/16922421
        def f = { 
          Object... args -> 
            print "There are: "; 
            print args.size(); 
            println " arguments and they are: "; 
            args.each { println it }; 
            println "DONE" 
        }

        def x = new int[2];
        x[0] = 1;
        x[1] = 2;

        f(1,2); // 1
        f([1,2]); // 2
        f(a:x); // <--- used label 'a', or anything else 
    }
//     stage "Create build output"

//     // Make the output directory.
//     sh "mkdir -p output"

//     // Write an useful file, which is needed to be archived.
//     writeFile file: "output/usefulfile.txt", text: "This file is useful, need to archive it."

//     // Write an useless file, which is not needed to be archived.
//     writeFile file: "output/uselessfile.md", text: "This file is useless, no need to archive it."

//     stage "Archive build output"
    
//     // Archive the build output artifacts.
//     archiveArtifacts artifacts: 'output/*.txt', excludes: 'output/*.md'
}